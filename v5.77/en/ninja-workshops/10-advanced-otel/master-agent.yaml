extensions:
  health_check:                   # Enables the health check extension
    endpoint: 0.0.0.0:13133
  file_storage/psq:      # Extension Type/Name
    # Defines the directory where checkpoint files will be stored
    directory: "./checkpoint-folder"   
    # Ensures that the directory is created if not exist 
    create_directory: true  
    # Specifies timeout for file operations for checkpointing
    timeout: 1s
    # Ensures that old checkpoint data is compacted periodically
    compaction:  
      # Controls if compaction process begins at OpenTelemetry Collector startup               
      on_start: true   
      # Specifies the directory used for compaction (as a midstep)        
      directory: "./checkpoint-folder/tmp"
      # Size limit for checkpoint transactions before compaction occurs
      max_transaction_size: 65_536        

receivers:
  otlp:                           # Receiver Type
    protocols:                    # list of Protocols used 
      http:                       # This wil enable the HTTP Protocol
        endpoint: "0.0.0.0:4318"  # Endpoint for incoming telemetry data
  hostmetrics:                    # Receiver Type
    collection_interval: 3600s    # Scrape metrics every hour
    scrapers:                     # Array of hostmetric scrapers
      cpu:                        # Scraper for cpu metrics
    filelog/quotes:               # Receiver Type/Receiver Name
    include: [./quotes.log]       # Include the file quotes.log
    include_file_path: true       # Include the file path in the data
    include_file_name: false      # Exclude the file name in the data
    resource:                     # Array of resource attributes
      com.splunk/source: ./quotes.log  # Source attribute
      com.splunk.sourcetype: quotes   # Sourcetype attribute

exporters:
  debug:                          # Exporter Type
    # Exporter outputs detailed Debug info of every telemetry record
    verbosity: detailed
  file:                           # Exporter Type
    path: "./agent.out"           # Path where data will be saved in OTLP json format
    append: false                 # Overwrite the file each time
  otlphttp:
    endpoint: "localhost:5317"
    headers:
      X-SF-Token: "FAKE_SPLUNK_ACCESS_TOKEN" # or your own version of a token
    tls:                       # Configure Transport Layer Security
      # true disables TLS verification for the connection
      insecure: true             
    # Controls retrying when there is a failure in sending data  
    retry_on_failure:             
      enabled: true            # Enables retrying
      # Configures an internal queue to store data that couldnâ€™t be sent
    sending_queue:              
      enabled: true          # Enables Sending queue
      # Specifies the number of consumers reading from the queue
      num_consumers: 10         
      queue_size: 10000      # The maximum size of the queue
      # Specifies queue state will be backed up in the file system
      storage: file_storage/psq  

processors:
  memory_limiter:                 # Limits memory usage of the OpenTelemetry Collector
    check_interval: 2s            # Interval to check memory usage
    limit_mib: 512                # Memory limit in MiB
  # Processor Type
  resourcedetection:
    # Array of resource detectors (e.g., system, cloud providers)
    detectors: [system]
    # Overwrites existing attributes in the data
    override: true
  resource/add_mode:              # Processor Type/Name
    attributes:                   # Array of attributes and modifications
    - action: insert              # Action is to insert a key
      key: otelcol.service.mode   # Key name
      value: "agent"              # Key value

service:
   extensions: [health_check,file_storage/psq]
   pipelines:
    traces:
      receivers: [otlp]
      processors:                 # Alternative syntax option [memory_limiter]
      - memory_limiter
      - resourcedetection
      - resource/add_mode
      exporters: [debug, otlphttp]
    metrics:
      #receivers: [otlp, hostmetrics]
      receivers: [otlp]
      processors:
      - memory_limiter
      - resourcedetection
      - resource/add_mode
      exporters: [debug, otlphttp]
    logs: 
      receivers: [otlp]
      processors:
      - memory_limiter
      - resourcedetection
      - resource/add_mode
      exporters: [debug, otlphttp]
